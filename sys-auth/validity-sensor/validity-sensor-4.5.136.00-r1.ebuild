# Copyright 2016 Jan Chren (rindeal)
# Distributed under the terms of the GNU General Public License v2

EAPI=6

inherit rindeal rindeal-utils rpm systemd user udev

DESCRIPTION="HP SP62413: Validity Fingerprint Reader Driver"
HOMEPAGE="https://h20566.www2.hp.com/hpsc/swd/public/detail?sp4ts.oid=5359406&swItemId=ob_125201_1&swEnvOid=2020"
LICENSE="HP-eula"

SLOT="0"
SRC_URI="http://ftp.hp.com/pub/softpaq/sp84501-85000/sp84530.tar"

# binaries provided by HP are for amd64 only
KEYWORDS="-* ~amd64"

RDEPEND_A=(
	# libusb-0.1.so.4
	'virtual/libusb:0'
	# libcrypto.so.0.9.8
	# libssl.so.0.9.8
	'dev-libs/openssl:0.9.8'
	# device discovery
	'virtual/udev'
)


inherit arrays

## vcsFPService will run as 'validity' user.
## 'fingerprint' group is required to be able to communicate with the FP reader and
## is also used by fingerprint-gui.
VFS_USER='validity'
VFS_GROUP='fingerprint'
VFS_UMASK='0007'

VCSFPSERVICE_INST_DIR='/usr/sbin'

MY_UDEV_RULES="${T}/validity-sensor.rules"

src_unpack() {
	# unpack tar
	default

	mkdir -p "${S}" || die
	rpm_unpack SP84530/Validity-Sensor-Setup-4.5-136.0.x86_64.rpm "${S}"

	cp -r "${FILESDIR}/vcsFPService_preload" "${S}/" || die
}

my_generate_udev_rules() {
	# this list is taken from 'vfsDriver.h' file
	local -A devices=(
		['VFS301']='138A:0005'
		['VFS451']='138A:0007'
		['VFS471']='138A:003c'
		['VFS491']='138A:003d'
		['VFS495']='138A:003f'
		['VFS5011']='138A:0011'
		['VFS5111']='138A:0010'
		['VFS5131']='138A:0018'
	)
	my_rule_a2s() {
		local -n array="${1}"
		local str
		str="$(printf '%s, ' "${array[@]}")"
		str="${str::-2}"
		printf "%s\n" "${str}"
	}
	local f_rules="${MY_UDEV_RULES}"

	echo "Generating '$(basename "${f_rules}")'"

	# create/reset file
	printf '' >"${f_rules}" || die

	cat <<-_EOF_  >>"${f_rules}" || die
	## DO NOT EDIT THIS FILE
	## autogenerated by '${CATEGORY}/${PF}' package on $(date --utc --iso-8601=minutes)

	_EOF_

	local -a permission_rules=() symlink_rules=() power_control_rules=()
	local d

	for d in "${!devices[@]}" ; do
		local _key="${d}" _val="${devices["${d}"],,}"
		local name="${_key,,}" vendor="${_val%%:*}" product="${_val##*:}"
		local rule_id=(
			"SUBSYSTEM==\"usb\""
			"ATTRS{idVendor}==\"${vendor}\""
			"ATTRS{idProduct}==\"${product}\""
		)
		local rule_permissions=( "${rule_id[@]}"
			"MODE=\"0660\""
			"GROUP=\"${VFS_GROUP}\""
		)
		local rule_symlinks=( "${rule_id[@]}"
			# handy symlink
			"SYMLINK+=\"input/${name}\""
		)
		# libfprint already has rules to take care of power control, however we can never be too sure
		local rule_power_control=( "${rule_id[@]}"
			"TEST==\"power/control\""
			"ATTR{power/control}=\"auto\""
		)

		permission_rules+=( "$(my_rule_a2s rule_permissions)" )
		symlink_rules+=( "$(my_rule_a2s rule_symlinks)" )
		power_control_rules+=( "$(my_rule_a2s rule_power_control)" )
	done

	(	echo "# permission rules:"
		printf '%s\n' "${permission_rules[@]}"
		echo
		echo "# symlink rules:"
		printf '%s\n' "${symlink_rules[@]}"
		echo
		echo "# power control rules:"
		printf '%s\n' "${power_control_rules[@]}"
	) >>"${f_rules}" || die

}

src_compile() {
	rindeal:expand_vars vcsFPService_preload/preload.c{.in,}
	emake -C vcsFPService_preload

	local f
	for f in "${FILESDIR}"/*.in ; do
		rindeal:expand_vars "${f}" "${T}/$(basename "${f%".in"}")"
	done

	my_generate_udev_rules
}

QA_PRESTRIPPED="${VCSFPSERVICE_INST_DIR#/}/vcsFPService"

src_install() {
	dolib.so 'usr/lib64/libvfsFprintWrapper.so'
	dosbin usr/sbin/* usr/bin/vcsFPService

	dodoc usr/share/doc/packages/validity/README

	insinto /usr/libexec/
	doins vcsFPService_preload/vcsFPService_preload.so

	systemd_dounit "${T}/vcsFPService.service"
	systemd_newtmpfilesd "${FILESDIR}/vcsFPService.tmpfilesd.conf" "vcsFPService.conf"

	exeinto "$(systemd_get_utildir)/system-sleep"
	doexe "${FILESDIR}/65-vcsFPService-SuspendResume.sh"

	udev_newrules "${MY_UDEV_RULES}" "60-validity-sensor.rules"
}

pkg_postinst() {
	[[ -z "${VFS_USER}" || -z "${VFS_GROUP}" ]] && die

	# enewgroup <group> [gid]
	enewgroup "${VFS_GROUP}"
	# enewuser <user> [uid] [shell] [homedir] [groups]
	enewuser "${VFS_USER}" -1 -1 -1 "${VFS_GROUP}"

	elog "To use the fingerprint reader you have to be a member of '${VFS_GROUP}' group."

	udev_reload
}
